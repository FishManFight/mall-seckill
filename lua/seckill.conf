#lua 模块
lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lua-resty-kafka-master/lib/?.lua;;";
#c模块     
lua_package_cpath "/usr/local/openresty/lualib/?.so;;";

#限流设置   binary_remote_addr:根据请求IP进行限流  contentRateLimit:缓存空间名称 10m:缓存空间
#rate=2r/s:每秒钟允许有2个请求被处理
limit_req_zone $binary_remote_addr zone=contentRateLimit:10m rate=2r/s;


server {
	listen       80;
	server_name  localhost;
	location / {
		root   html;
		index  index.html index.htm;
	}
	error_page   500 502 503 504  /50x.html;
	
	#/web开始的请求，做日志记录，然后跳转到下面的location
    location /web/items/ {
	#限流
    limit_req zone=contentRateLimit burst=4 nodelay;
    content_by_lua_file /usr/local/openresty/nginx/lua/items-access.lua;
    }


    #商品详情页,以/items/开始的请求，直接在详情页目录下找文件
    location /items/ {
    #日志处理
    #content_by_lua_file /usr/local/openresty/nginx/lua/items-access.lua;
    #root /usr/local/server/web/;
		proxy_pass http://192.168.200.1:80/page/html/;
    }
	#令牌校验
	location /token {
		content_by_lua_file /usr/local/openresty/nginx/lua/auth_verify.lua;
	}
	#抢单
	location /lua/order/add {
		content_by_lua_file /usr/local/openresty/nginx/lua/seckill-order-add.lua;
	}

	#微服务网关
	location /api/ {
		proxy_pass http://192.168.200.1:8001;
	}
	#redis
	location /test/redis {
		content_by_lua '
			ngx.header.content_type="application/json;charset=utf8"
			--引入redis
			local rredis = require "redis-cluster"
			--从redis中查询hash类型数据
			local sku = rredis.hget("SKU_1026968","num")[1]
			ngx.say(sku)
		';
	}
	#kafka
	location /test/kafka {
		content_by_lua '
			ngx.header.content_type="application/json;charset=utf8"
			 --引入kafka
			local kafka = require "kafka"
			--发送消息
			local offset = kafka.send("lua-demo","hello")
			ngx.say(offset)
		';
	}
}

